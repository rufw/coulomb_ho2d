--- src/quantumdot/RadialPotential.hpp	2014-04-29 14:45:43.112879294 -0400
+++ src/quantumdot/RadialPotential.hpp	2014-04-29 14:46:01.104678787 -0400
@@ -126,4 +126,5 @@
 	using namespace std;
 	os << "Potential:" << endl;
 	os << "  r^(-"<<alpha<<")*p(r)*exp(-r*"<<beta<<")"<<endl;
+	return os;
       }


--- src/manybody/simple_matrix.hpp	2014-04-30 19:24:39.721914855 -0400
+++ src/manybody/simple_matrix.hpp	2014-04-30 19:26:32.520604542 -0400
@@ -89,7 +89,7 @@
 	assert( (row>=1) && (row <= nrows_) );
 	assert( (col>=1) && (col <= ncols_) );
 	const index_t index = ld_*(col-1) + (row-1);
-	assert( index < data_.size() );
+	assert( std::size_t(index) < data_.size() );
 	return data_.begin() + index;

       }
@@ -102,7 +102,7 @@
 	assert( (row>=1) && (row <= nrows_) );
 	assert( (col>=1) && (col <= ncols_) );
 	const index_t index = ld_*(col-1) + (row-1);
-	assert( index < data_.size() );
+	assert( std::size_t(index) < data_.size() );
 	return data_.begin() + index;

       }
@@ -134,7 +134,7 @@
 	else
 	  ld_ = ld;

-	if ( data_.size() != ld_ * ncols_ )
+	if ( data_.size() != std::size_t(ld_ * ncols_) )
 	  data_.resize(ld_ * ncols_);
       }

@@ -165,5 +165,6 @@
 	  for (index_t k = 0; k < nrows_; ++k)
 	    *(first + k) *= factor;
 	}
+	return *this;

       }
@@ -212,5 +213,6 @@
 	this->use_block_ = src.use_block_;
 	this->active_cols_ = src.active_cols_;
 	this->active_rows_ = src.active_rows_;
+	return *this;

       }
